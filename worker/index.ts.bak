import type { R2Bucket } from "@cloudflare/workers-types";

interface Env {
  STATIC_ASSETS: R2Bucket;
}
export default {
  async fetch(
    request: Request,
    env: Env
  ): Promise<Response> {
    const url = new URL(request.url);
    let pathKey = url.pathname.slice(1);
    
    // Default to index.html for the root path
    if (!pathKey) pathKey = 'index.html';
    
    try {
      // Try to get the requested object
      const object = await env.STATIC_ASSETS.get(pathKey);
      
      if (object) {
        const arrayBuffer = await object.arrayBuffer();
        
        // Set appropriate content type based on file extension
        const contentType = object.httpMetadata?.contentType || 
                           getContentType(pathKey);
        
        return new Response(arrayBuffer, {
          headers: {
            'Content-Type': contentType,
            'Cache-Control': 'public, max-age=14400',
          },
        });
      }

      // If it's not an asset with a file extension, serve index.html for SPA routing
      if (!pathKey.includes('.')) {
        const index = await env.STATIC_ASSETS.get('index.html');
        if (index) {
          const indexBuffer = await index.arrayBuffer();
          return new Response(indexBuffer, {
            headers: {
              'Content-Type': 'text/html',
              'Cache-Control': 'no-cache',
            },
          });
        }
      }
      
      // If nothing is found, return 404
      return new Response('Not Found', { status: 404 });
    } catch (err) {
      console.error(err);
      return new Response('Internal Server Error', { status: 500 });
    }
  },
};

// Helper function to determine content type based on file extension
function getContentType(path: string): string {
  const ext = path.split('.').pop()?.toLowerCase();
  const contentTypes: Record<string, string> = {
    'html': 'text/html',
    'css': 'text/css',
    'js': 'application/javascript',
    'json': 'application/json',
    'png': 'image/png',
    'jpg': 'image/jpeg',
    'jpeg': 'image/jpeg',
    'gif': 'image/gif',
    'svg': 'image/svg+xml',
    'ico': 'image/x-icon',
    'txt': 'text/plain',
    'pdf': 'application/pdf',
  };
  
  return contentTypes[ext || ''] || 'application/octet-stream';
}